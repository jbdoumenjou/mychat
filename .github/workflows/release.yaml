on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  GO_VERSION: '1.23'

name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

        # Automate release management
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          # this assumes that you have created a personal access token
          # (PAT) and configured it as a GitHub action secret named
          # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
          token: ${{ secrets.RELEASE_PLEASE }}
          # this is a built-in strategy in release-please, see "Action Inputs"
          # for more options
          release-type: go

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        if: ${{ steps.release.outputs.release_created }}
        with:
          go-version: ${{ env.GO_VERSION }}

      # Build binary for Linux amd64
      - name: Build Linux amd64 Binary
        if: ${{ steps.release.outputs.release_created }}
        run: |
          GOOS=linux GOARCH=amd64 go build -o .build/mychat-linux-amd64 ./cmd/main.go

      # Build gscli binary for Linux amd64
      - name: Build Linux gscli amd64 Binary
        if: ${{ steps.release.outputs.release_created }}
        run: |
          GOOS=linux GOARCH=amd64 go build -o .build/gscli-linux-amd64 ./cmd/gscli/main.go

      # Build binary for macOS ARM64
      - name: Build macOS ARM64 Binary
        if: ${{ steps.release.outputs.release_created }}
        run: |
          GOOS=darwin GOARCH=arm64 go build -o .build/mychat-macos-arm64 ./cmd/main.go

      # Build gscli binary for macOS ARM64
      - name: Build gscli macOS ARM64 Binary
        if: ${{ steps.release.outputs.release_created }}
        run: |
          GOOS=darwin GOARCH=arm64 go build -o .build/gscli-macos-arm64 ./cmd/gscli/main.go

      - name: Build Linux ARM64 Binary
        if: ${{ steps.release.outputs.release_created }}
        run: |
          GOOS=linux GOARCH=arm64 go build -o .build/mychat-linux-arm64 ./cmd/main.go

      - name: Upload Release Artifact
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release.outputs.tag_name }} \
          .build/mychat-linux-amd64 \
          .build/mychat-macos-arm64 \
          .build/mychat-linux-arm64 \
          .build/gscli-linux-amd64 \
          .build/gscli-macos-arm64
